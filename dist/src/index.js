#!/usr/bin/env node
Object.defineProperty(exports,"__esModule",{value:true});const _prompts=require("@clack/prompts");const _picocolors=_interop_require_default(require("picocolors"));const _downloadRepo=_interop_require_default(require("./utils/downloadRepo"));const _generateFile=_interop_require_default(require("./utils/generateFile"));function asyncGeneratorStep(gen,resolve,reject,_next,_throw,key,arg){try{var info=gen[key](arg);var value=info.value}catch(error){reject(error);return}if(info.done){resolve(value)}else{Promise.resolve(value).then(_next,_throw)}}function _async_to_generator(fn){return function(){var self=this,args=arguments;return new Promise(function(resolve,reject){var gen=fn.apply(self,args);function _next(value){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"next",value)}function _throw(err){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"throw",err)}_next(undefined)})}}function _interop_require_default(obj){return obj&&obj.__esModule?obj:{default:obj}}void _async_to_generator(function*(){console.log();const s=(0,_prompts.spinner)();(0,_prompts.intro)(_picocolors.default.inverse(" create-express-app "));let name="myExpressApp";name=yield(0,_prompts.text)({message:"What would you like to you project ?",placeholder:"myExpressApp"});s.start("Downloading the template...");yield(0,_downloadRepo.default)();(0,_generateFile.default)(name.toString());s.stop();const nextSteps=`cd ${name}        
npm install
npm dev`;(0,_prompts.note)(nextSteps,"Next steps.");(0,_prompts.outro)(`Problems? ${_picocolors.default.underline(_picocolors.default.cyan("https://github.com/kriptonian1/create-express-app/issues"))}`)})();